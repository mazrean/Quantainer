// Package Openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package Openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	TraPMemberAuthScopes = "traPMemberAuth.Scopes"
)

// Defines values for FileType.
const (
	FileTypeGif FileType = "gif"

	FileTypeJpeg FileType = "jpeg"

	FileTypeOther FileType = "other"

	FileTypePng FileType = "png"

	FileTypeSvg FileType = "svg"

	FileTypeWebp FileType = "webp"
)

// ファイル
type File struct {
	// ファイル作成時刻
	CreatedAt time.Time `json:"createdAt"`

	// ファイルの作成者
	Creator string `json:"creator"`

	// ファイルのid
	Id string `json:"id"`

	// ファイルの種類
	Type FileType `json:"type"`
}

// ファイルの種類
type FileType string

// 新規ファイル
type NewFile struct {
	File string `json:"file"`
}

// ユーザー
type User struct {
	// traQのID（UUID）
	Id string `json:"id"`

	// traQID（UUIDでない方）
	Name string `json:"name"`
}

// CallbackParams defines parameters for Callback.
type CallbackParams struct {
	// OAuth2.0のcode
	Code string `json:"code"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// ファイルのアップロード
	// (POST /files)
	PostFile(ctx echo.Context) error
	// OAuthのコールバック
	// (GET /oauth2/callback)
	Callback(ctx echo.Context, params CallbackParams) error
	// OAuthのcode_challengeとかの取得
	// (GET /oauth2/generate/code)
	GetGeneratedCode(ctx echo.Context) error
	// ログアウト
	// (POST /oauth2/logout)
	PostLogout(ctx echo.Context) error
	// traQの全ユーザー取得
	// (GET /users)
	GetUsers(ctx echo.Context) error
	// 自分の情報の取得
	// (GET /users/me)
	GetMe(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostFile converts echo context to params.
func (w *ServerInterfaceWrapper) PostFile(ctx echo.Context) error {
	var err error

	ctx.Set(TraPMemberAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostFile(ctx)
	return err
}

// Callback converts echo context to params.
func (w *ServerInterfaceWrapper) Callback(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CallbackParams
	// ------------- Required query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, true, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Callback(ctx, params)
	return err
}

// GetGeneratedCode converts echo context to params.
func (w *ServerInterfaceWrapper) GetGeneratedCode(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetGeneratedCode(ctx)
	return err
}

// PostLogout converts echo context to params.
func (w *ServerInterfaceWrapper) PostLogout(ctx echo.Context) error {
	var err error

	ctx.Set(TraPMemberAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostLogout(ctx)
	return err
}

// GetUsers converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsers(ctx echo.Context) error {
	var err error

	ctx.Set(TraPMemberAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsers(ctx)
	return err
}

// GetMe converts echo context to params.
func (w *ServerInterfaceWrapper) GetMe(ctx echo.Context) error {
	var err error

	ctx.Set(TraPMemberAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMe(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/files", wrapper.PostFile)
	router.GET(baseURL+"/oauth2/callback", wrapper.Callback)
	router.GET(baseURL+"/oauth2/generate/code", wrapper.GetGeneratedCode)
	router.POST(baseURL+"/oauth2/logout", wrapper.PostLogout)
	router.GET(baseURL+"/users", wrapper.GetUsers)
	router.GET(baseURL+"/users/me", wrapper.GetMe)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RWb48TRRz+KmT05fZ227uLd0t4gRiRKHIE7o3kYqa7v7YD3Z1lZvawXjZhu6BVJPBC",
	"ISQoguQ4j1AwJBoF/TJDy/HKr2BmdtvttXst/iGRN3dtZ+b3/OZ5nnlmNpBDvYD64AuO7A3EnQZ4WH98",
	"lzRB/XeBO4wEglAf2Ugm38j2bdm+K5P7yEABowEwQUAvcRhgAe5BMX3ds99v9jtX+zfavc4TZCD4BHuB",
	"wkIVq7xcspZLlcWT1rK9WLbnyx8hA9Uo87BANnKxgJIgHiADiVaglnDBiF9HkZGCUzYdWsbdFH3n/MVd",
	"0B7+lAH2iwoTd2ZN4u4qBtUFXFl6yy2VF93l0kKtXCkt1Wq1UtW1lpaq5UoVL1mj+wpDXWACOf1hA73J",
	"oIZs9IaZi2VmSplKppNqXhQZiMHZkDBwkX0K5SVzbowRidaGgLR6GhyhAIfFZm34+Vb3xe3v1Kb90FNo",
	"pwOoKz/46u85qAbIQHxdfamTGjIQFQ1gI5j5Jj+Ec8VW6197tLN5ZarhatnCIZNV4mPWmuRyjBu9roiA",
	"VQ6FDtqUyVPZ/lkmTyd6KLKHYPi4jLtH3vnzaWd1Vf374pUYxMceFKMPoWV8T8bbMr7Qv/breBt7mr7I",
	"ShprkrPIQByckBHROqEsmZIiGF45Cl4V2MFQNDRNqjOH0jMEBsVsxIFzQn2ed4AD8j60UKTqEr9GdaxQ",
	"X2BHh0q2Lm88ZE1ko4YQAbdNs05EI6zOOdQzsynm8RD7AhMfmCJsN1H5mIy7B1eOqDaI0NTkQ/vSgXVg",
	"PF1VnrPmLFWMBuDjgCAbzc9ZcxXlDCwaev+mcpj+FFAuZh4n2b4jk0Qm12XyQDktUTopk2E1/4iLbLRC",
	"udDnJJUGuHibuq0BPeBrEC9sChJgJkxlnZKLBc5TfVaSDA5iFKX684D6PN1ExbLGkHAQNImj2zNPc7Wn",
	"l4UZYIyL0e9c7X15S/G6YJWLGHsg2480Y49lfF3GmzK+kDpbrVlMO9y95tlvnf7NW3q2mifbWzL5UZ3h",
	"Udci+9SkX0+tRWsG4qHnqTh5Ob0ErvM8XBSESXEoGhXTwc1mFTtnVId1KLDDMYWq6z7W5e7L5KoCaD+c",
	"8MGhQa1iifbmtGDYoS7I+Kud7bsy/iFjtH1JxlsyvvwPSR0yNnVLA6pSftBapI4Owx4IYFwLUsBPZc6S",
	"cVf1jIw0Ts6GoMM+S4VsKE8uwUIwRmw5nnJrIxrVwVc0g6mrzBJKTfrYaeBmE/w6aMYuybjbu3Kt98f1",
	"Cc0OgziclXcPDZoc0W7emt9LO3m+nV0mO9uXe1cePv/6yYtv78j4/ov4l+f3nsj4hlLsfBsZqAHY1fRt",
	"oBMgSofSrN11LvPoHyTvAVx1XChX5hcW9+9bwaJxwNy/7z0hgmN+s+gejf4jW8wicMIhI1I1aZ2GYlq4",
	"plFxR7Y3ZdIpjNIP0hp/9xD9D4NpfK+FzIU8c0ahqzOH9S5ujb509jbzqq72L+8IIsDjsy4L/R6L8tcB",
	"Y7j12l0eM+gdCKY0GpXL9PbOoZ3Pt3udz2Tc7ScXe9//NDV6jgJ6hdd5qtBrpsgU+sbV0KXZ+uBeyt+b",
	"tmk2qYObDcqFPW9ZlokDYq6XkYLKqgwfrNlhjIzhL2Hq7OF3/WqI1qK/AgAA//9pU6Tzkg8AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
