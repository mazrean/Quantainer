// Package Openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package Openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	TraPMemberAuthScopes = "traPMemberAuth.Scopes"
)

// Defines values for FileType.
const (
	FileTypeGif FileType = "gif"

	FileTypeJpeg FileType = "jpeg"

	FileTypeOther FileType = "other"

	FileTypePng FileType = "png"

	FileTypeSvg FileType = "svg"

	FileTypeWebp FileType = "webp"
)

// Defines values for GroupType.
const (
	GroupTypeArtBook GroupType = "artBook"

	GroupTypeOther GroupType = "other"
)

// Defines values for ReadPermission.
const (
	ReadPermissionPrivate ReadPermission = "private"

	ReadPermissionPublic ReadPermission = "public"
)

// Defines values for ResourceType.
const (
	ResourceTypeImage ResourceType = "image"

	ResourceTypeOther ResourceType = "other"
)

// Defines values for WritePermission.
const (
	WritePermissionPrivate WritePermission = "private"

	WritePermissionPublic WritePermission = "public"
)

// ファイル
type File struct {
	// ファイル作成時刻
	CreatedAt time.Time `json:"createdAt"`

	// ファイルの作成者
	Creator string `json:"creator"`

	// ファイルのid
	Id string `json:"id"`

	// ファイルの種類
	Type FileType `json:"type"`
}

// ファイルの種類
type FileType string

// グループ系componentのbase
type GroupBase struct {
	// グループの説明
	Description string `json:"description"`

	// グループ名
	Name string `json:"name"`

	// グループ閲覧権限
	ReadPermission ReadPermission `json:"readPermission"`

	// グループの種類
	Type GroupType `json:"type"`

	// ファイル追加権限
	WritePermission WritePermission `json:"writePermission"`
}

// GroupDetail defines model for GroupDetail.
type GroupDetail struct {
	// Embedded struct due to allOf(#/components/schemas/GroupBase)
	GroupBase `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// グループの管理者
	Administrators []string `json:"administrators"`

	// リソース
	MainResource Resource `json:"mainResource"`
}

// GroupInfo defines model for GroupInfo.
type GroupInfo struct {
	// Embedded struct due to allOf(#/components/schemas/GroupBase)
	GroupBase `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// リソース
	MainResource Resource `json:"mainResource"`
}

// グループの種類
type GroupType string

// 新規ファイル
type NewFile struct {
	File string `json:"file"`
}

// NewGroup defines model for NewGroup.
type NewGroup struct {
	// Embedded struct due to allOf(#/components/schemas/GroupBase)
	GroupBase `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// メインのリソース
	MainResourceID string `json:"mainResourceID"`

	// グループに含むリソースのID
	ResourceIDs []string `json:"resourceIDs"`
}

// 新規リソース
type NewResource struct {
	// リソースのコメント
	Comment string `json:"comment"`

	// リソース名
	Name string `json:"name"`

	// リソースの種類
	ResourceType ResourceType `json:"resourceType"`
}

// グループ閲覧権限
type ReadPermission string

// Resource defines model for Resource.
type Resource struct {
	// Embedded struct due to allOf(#/components/schemas/NewResource)
	NewResource `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// リソース作成時刻
	CreatedAt time.Time `json:"createdAt"`

	// ファイルの作成者
	Creator string `json:"creator"`

	// ファイルid
	FileID string `json:"fileID"`

	// リソースid
	Id string `json:"id"`
}

// リソースの種類
type ResourceType string

// ユーザー
type User struct {
	// traQのID（UUID）
	Id string `json:"id"`

	// traQID（UUIDでない方）
	Name string `json:"name"`
}

// ファイル追加権限
type WritePermission string

// CodeInQuery defines model for codeInQuery.
type CodeInQuery string

// FileIDInPath defines model for fileIDInPath.
type FileIDInPath string

// GroupIDInPath defines model for groupIDInPath.
type GroupIDInPath string

// GroupTypeInQuery defines model for groupTypeInQuery.
type GroupTypeInQuery []GroupType

// LimitInQuery defines model for limitInQuery.
type LimitInQuery int

// OffsetInQuery defines model for offsetInQuery.
type OffsetInQuery int

// ResourceIDInPath defines model for resourceIDInPath.
type ResourceIDInPath string

// ResourceTypeInQuery defines model for resourceTypeInQuery.
type ResourceTypeInQuery []ResourceType

// UserInQuery defines model for userInQuery.
type UserInQuery []string

// PostResourceJSONBody defines parameters for PostResource.
type PostResourceJSONBody NewResource

// GetGroupsParams defines parameters for GetGroups.
type GetGroupsParams struct {
	// グループの種類
	Type *GroupTypeInQuery `json:"type,omitempty"`

	// ファイル登録者
	User *UserInQuery `json:"user,omitempty"`

	// 取得するデータの数
	Limit *LimitInQuery `json:"limit,omitempty"`

	// 取得するデータのoffset
	Offset *OffsetInQuery `json:"offset,omitempty"`
}

// PostGroupJSONBody defines parameters for PostGroup.
type PostGroupJSONBody NewGroup

// PatchGroupJSONBody defines parameters for PatchGroup.
type PatchGroupJSONBody NewGroup

// CallbackParams defines parameters for Callback.
type CallbackParams struct {
	// OAuth2.0のcode
	Code CodeInQuery `json:"code"`
}

// GetResourcesParams defines parameters for GetResources.
type GetResourcesParams struct {
	// リソースの種類
	Type *ResourceTypeInQuery `json:"type,omitempty"`

	// ファイル登録者
	User *UserInQuery `json:"user,omitempty"`

	// 取得するデータの数
	Limit *LimitInQuery `json:"limit,omitempty"`

	// 取得するデータのoffset
	Offset *OffsetInQuery `json:"offset,omitempty"`
}

// PostResourceJSONRequestBody defines body for PostResource for application/json ContentType.
type PostResourceJSONRequestBody PostResourceJSONBody

// PostGroupJSONRequestBody defines body for PostGroup for application/json ContentType.
type PostGroupJSONRequestBody PostGroupJSONBody

// PatchGroupJSONRequestBody defines body for PatchGroup for application/json ContentType.
type PatchGroupJSONRequestBody PatchGroupJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// ファイルのアップロード
	// (POST /files)
	PostFile(ctx echo.Context) error
	// ファイルの取得
	// (GET /files/{fileID})
	GetFile(ctx echo.Context, fileID FileIDInPath) error
	// リソースの作成
	// (POST /files/{fileID}/resources)
	PostResource(ctx echo.Context, fileID FileIDInPath) error
	// グループの一覧の取得
	// (GET /groups)
	GetGroups(ctx echo.Context, params GetGroupsParams) error
	// グループの作成
	// (POST /groups)
	PostGroup(ctx echo.Context) error
	// グループの削除
	// (DELETE /groups/{groupID})
	DeleteGroup(ctx echo.Context, groupID GroupIDInPath) error
	// グループの情報の取得
	// (GET /groups/{groupID})
	GetGroup(ctx echo.Context, groupID GroupIDInPath) error
	// グループの情報の編集
	// (PATCH /groups/{groupID})
	PatchGroup(ctx echo.Context, groupID GroupIDInPath) error
	// グループの作成
	// (POST /groups/{groupID}/resources/{resourceID})
	PostResourceToGroup(ctx echo.Context, groupID GroupIDInPath, resourceID ResourceIDInPath) error
	// OAuthのコールバック
	// (GET /oauth2/callback)
	Callback(ctx echo.Context, params CallbackParams) error
	// OAuthのcode_challengeとかの取得
	// (GET /oauth2/generate/code)
	GetGeneratedCode(ctx echo.Context) error
	// ログアウト
	// (POST /oauth2/logout)
	PostLogout(ctx echo.Context) error
	// リソースの情報の取得
	// (GET /resources)
	GetResources(ctx echo.Context, params GetResourcesParams) error
	// リソースの情報の取得
	// (GET /resources/{resourceID})
	GetResource(ctx echo.Context, resourceID ResourceIDInPath) error
	// traQの全ユーザー取得
	// (GET /users)
	GetUsers(ctx echo.Context) error
	// 自分の情報の取得
	// (GET /users/me)
	GetMe(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostFile converts echo context to params.
func (w *ServerInterfaceWrapper) PostFile(ctx echo.Context) error {
	var err error

	ctx.Set(TraPMemberAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostFile(ctx)
	return err
}

// GetFile converts echo context to params.
func (w *ServerInterfaceWrapper) GetFile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "fileID" -------------
	var fileID FileIDInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "fileID", runtime.ParamLocationPath, ctx.Param("fileID"), &fileID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fileID: %s", err))
	}

	ctx.Set(TraPMemberAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFile(ctx, fileID)
	return err
}

// PostResource converts echo context to params.
func (w *ServerInterfaceWrapper) PostResource(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "fileID" -------------
	var fileID FileIDInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "fileID", runtime.ParamLocationPath, ctx.Param("fileID"), &fileID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fileID: %s", err))
	}

	ctx.Set(TraPMemberAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostResource(ctx, fileID)
	return err
}

// GetGroups converts echo context to params.
func (w *ServerInterfaceWrapper) GetGroups(ctx echo.Context) error {
	var err error

	ctx.Set(TraPMemberAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetGroupsParams
	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", ctx.QueryParams(), &params.Type)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter type: %s", err))
	}

	// ------------- Optional query parameter "user" -------------

	err = runtime.BindQueryParameter("form", true, false, "user", ctx.QueryParams(), &params.User)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetGroups(ctx, params)
	return err
}

// PostGroup converts echo context to params.
func (w *ServerInterfaceWrapper) PostGroup(ctx echo.Context) error {
	var err error

	ctx.Set(TraPMemberAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostGroup(ctx)
	return err
}

// DeleteGroup converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "groupID" -------------
	var groupID GroupIDInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "groupID", runtime.ParamLocationPath, ctx.Param("groupID"), &groupID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter groupID: %s", err))
	}

	ctx.Set(TraPMemberAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteGroup(ctx, groupID)
	return err
}

// GetGroup converts echo context to params.
func (w *ServerInterfaceWrapper) GetGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "groupID" -------------
	var groupID GroupIDInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "groupID", runtime.ParamLocationPath, ctx.Param("groupID"), &groupID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter groupID: %s", err))
	}

	ctx.Set(TraPMemberAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetGroup(ctx, groupID)
	return err
}

// PatchGroup converts echo context to params.
func (w *ServerInterfaceWrapper) PatchGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "groupID" -------------
	var groupID GroupIDInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "groupID", runtime.ParamLocationPath, ctx.Param("groupID"), &groupID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter groupID: %s", err))
	}

	ctx.Set(TraPMemberAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchGroup(ctx, groupID)
	return err
}

// PostResourceToGroup converts echo context to params.
func (w *ServerInterfaceWrapper) PostResourceToGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "groupID" -------------
	var groupID GroupIDInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "groupID", runtime.ParamLocationPath, ctx.Param("groupID"), &groupID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter groupID: %s", err))
	}

	// ------------- Path parameter "resourceID" -------------
	var resourceID ResourceIDInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "resourceID", runtime.ParamLocationPath, ctx.Param("resourceID"), &resourceID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceID: %s", err))
	}

	ctx.Set(TraPMemberAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostResourceToGroup(ctx, groupID, resourceID)
	return err
}

// Callback converts echo context to params.
func (w *ServerInterfaceWrapper) Callback(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CallbackParams
	// ------------- Required query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, true, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Callback(ctx, params)
	return err
}

// GetGeneratedCode converts echo context to params.
func (w *ServerInterfaceWrapper) GetGeneratedCode(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetGeneratedCode(ctx)
	return err
}

// PostLogout converts echo context to params.
func (w *ServerInterfaceWrapper) PostLogout(ctx echo.Context) error {
	var err error

	ctx.Set(TraPMemberAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostLogout(ctx)
	return err
}

// GetResources converts echo context to params.
func (w *ServerInterfaceWrapper) GetResources(ctx echo.Context) error {
	var err error

	ctx.Set(TraPMemberAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetResourcesParams
	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", ctx.QueryParams(), &params.Type)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter type: %s", err))
	}

	// ------------- Optional query parameter "user" -------------

	err = runtime.BindQueryParameter("form", true, false, "user", ctx.QueryParams(), &params.User)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetResources(ctx, params)
	return err
}

// GetResource converts echo context to params.
func (w *ServerInterfaceWrapper) GetResource(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceID" -------------
	var resourceID ResourceIDInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "resourceID", runtime.ParamLocationPath, ctx.Param("resourceID"), &resourceID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceID: %s", err))
	}

	ctx.Set(TraPMemberAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetResource(ctx, resourceID)
	return err
}

// GetUsers converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsers(ctx echo.Context) error {
	var err error

	ctx.Set(TraPMemberAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsers(ctx)
	return err
}

// GetMe converts echo context to params.
func (w *ServerInterfaceWrapper) GetMe(ctx echo.Context) error {
	var err error

	ctx.Set(TraPMemberAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMe(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/files", wrapper.PostFile)
	router.GET(baseURL+"/files/:fileID", wrapper.GetFile)
	router.POST(baseURL+"/files/:fileID/resources", wrapper.PostResource)
	router.GET(baseURL+"/groups", wrapper.GetGroups)
	router.POST(baseURL+"/groups", wrapper.PostGroup)
	router.DELETE(baseURL+"/groups/:groupID", wrapper.DeleteGroup)
	router.GET(baseURL+"/groups/:groupID", wrapper.GetGroup)
	router.PATCH(baseURL+"/groups/:groupID", wrapper.PatchGroup)
	router.POST(baseURL+"/groups/:groupID/resources/:resourceID", wrapper.PostResourceToGroup)
	router.GET(baseURL+"/oauth2/callback", wrapper.Callback)
	router.GET(baseURL+"/oauth2/generate/code", wrapper.GetGeneratedCode)
	router.POST(baseURL+"/oauth2/logout", wrapper.PostLogout)
	router.GET(baseURL+"/resources", wrapper.GetResources)
	router.GET(baseURL+"/resources/:resourceID", wrapper.GetResource)
	router.GET(baseURL+"/users", wrapper.GetUsers)
	router.GET(baseURL+"/users/me", wrapper.GetMe)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
