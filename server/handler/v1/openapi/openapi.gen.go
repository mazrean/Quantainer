// Package Openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package Openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	TraPMemberAuthScopes = "traPMemberAuth.Scopes"
)

// Defines values for FileType.
const (
	FileTypeGif FileType = "gif"

	FileTypeJpeg FileType = "jpeg"

	FileTypeOther FileType = "other"

	FileTypePng FileType = "png"

	FileTypeSvg FileType = "svg"

	FileTypeWebp FileType = "webp"
)

// Defines values for GroupType.
const (
	GroupTypeArtBook GroupType = "artBook"

	GroupTypeOther GroupType = "other"
)

// Defines values for ReadPermission.
const (
	ReadPermissionPrivate ReadPermission = "private"

	ReadPermissionPublic ReadPermission = "public"
)

// Defines values for ResourceType.
const (
	ResourceTypeImage ResourceType = "image"

	ResourceTypeOther ResourceType = "other"
)

// Defines values for WritePermission.
const (
	WritePermissionPrivate WritePermission = "private"

	WritePermissionPublic WritePermission = "public"
)

// ファイル
type File struct {
	// ファイル作成時刻
	CreatedAt time.Time `json:"createdAt"`

	// ファイルの作成者
	Creator string `json:"creator"`

	// ファイルのid
	Id string `json:"id"`

	// ファイルの種類
	Type FileType `json:"type"`
}

// ファイルの種類
type FileType string

// グループ系componentのbase
type GroupBase struct {
	// グループの説明
	Description string `json:"description"`

	// グループ名
	Name string `json:"name"`

	// グループ閲覧権限
	ReadPermission ReadPermission `json:"readPermission"`

	// グループの種類
	Type GroupType `json:"type"`

	// ファイル追加権限
	WritePermission WritePermission `json:"writePermission"`
}

// GroupDetail defines model for GroupDetail.
type GroupDetail struct {
	// Embedded struct due to allOf(#/components/schemas/GroupBase)
	GroupBase `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// グループの管理者
	Administrators []string `json:"administrators"`

	// リソース
	MainResourceID Resource `json:"mainResourceID"`
}

// GroupInfo defines model for GroupInfo.
type GroupInfo struct {
	// Embedded struct due to allOf(#/components/schemas/GroupBase)
	GroupBase `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// リソース
	MainResourceID Resource `json:"mainResourceID"`
}

// グループの種類
type GroupType string

// 新規ファイル
type NewFile struct {
	File string `json:"file"`
}

// NewGroup defines model for NewGroup.
type NewGroup struct {
	// Embedded struct due to allOf(#/components/schemas/GroupBase)
	GroupBase `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// メインのリソース
	MainResourceID string `json:"mainResourceID"`

	// グループに含むリソースのID
	ResourceIDs []string `json:"resourceIDs"`
}

// 新規リソース
type NewResource struct {
	// リソースのコメント
	Comment string `json:"comment"`

	// リソース名
	Name string `json:"name"`

	// リソースの種類
	ResourceType ResourceType `json:"resourceType"`
}

// グループ閲覧権限
type ReadPermission string

// Resource defines model for Resource.
type Resource struct {
	// Embedded struct due to allOf(#/components/schemas/NewResource)
	NewResource `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// リソース作成時刻
	CreatedAt time.Time `json:"createdAt"`

	// ファイルの作成者
	Creator string `json:"creator"`

	// ファイルid
	FileID string `json:"fileID"`

	// リソースid
	Id string `json:"id"`
}

// リソースの種類
type ResourceType string

// ユーザー
type User struct {
	// traQのID（UUID）
	Id string `json:"id"`

	// traQID（UUIDでない方）
	Name string `json:"name"`
}

// ファイル追加権限
type WritePermission string

// CodeInQuery defines model for codeInQuery.
type CodeInQuery string

// FileIDInPath defines model for fileIDInPath.
type FileIDInPath string

// GroupIDInPath defines model for groupIDInPath.
type GroupIDInPath string

// GroupTypeInQuery defines model for groupTypeInQuery.
type GroupTypeInQuery []GroupType

// LimitInQuery defines model for limitInQuery.
type LimitInQuery int

// OffsetInQuery defines model for offsetInQuery.
type OffsetInQuery int

// ResourceIDInPath defines model for resourceIDInPath.
type ResourceIDInPath string

// ResourceTypeInQuery defines model for resourceTypeInQuery.
type ResourceTypeInQuery []ResourceType

// UserInQuery defines model for userInQuery.
type UserInQuery []string

// PostResourceJSONBody defines parameters for PostResource.
type PostResourceJSONBody NewResource

// GetGroupsParams defines parameters for GetGroups.
type GetGroupsParams struct {
	// グループの種類
	Type *GroupTypeInQuery `json:"type,omitempty"`

	// ファイル登録者
	User *UserInQuery `json:"user,omitempty"`

	// 取得するデータの数
	Limit *LimitInQuery `json:"limit,omitempty"`

	// 取得するデータのoffset
	Offset *OffsetInQuery `json:"offset,omitempty"`
}

// PostGroupJSONBody defines parameters for PostGroup.
type PostGroupJSONBody NewGroup

// PatchGroupJSONBody defines parameters for PatchGroup.
type PatchGroupJSONBody NewGroup

// CallbackParams defines parameters for Callback.
type CallbackParams struct {
	// OAuth2.0のcode
	Code CodeInQuery `json:"code"`
}

// GetResourcesParams defines parameters for GetResources.
type GetResourcesParams struct {
	// リソースの種類
	Type *ResourceTypeInQuery `json:"type,omitempty"`

	// ファイル登録者
	User *UserInQuery `json:"user,omitempty"`

	// 取得するデータの数
	Limit *LimitInQuery `json:"limit,omitempty"`

	// 取得するデータのoffset
	Offset *OffsetInQuery `json:"offset,omitempty"`
}

// PostResourceJSONRequestBody defines body for PostResource for application/json ContentType.
type PostResourceJSONRequestBody PostResourceJSONBody

// PostGroupJSONRequestBody defines body for PostGroup for application/json ContentType.
type PostGroupJSONRequestBody PostGroupJSONBody

// PatchGroupJSONRequestBody defines body for PatchGroup for application/json ContentType.
type PatchGroupJSONRequestBody PatchGroupJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// ファイルのアップロード
	// (POST /files)
	PostFile(ctx echo.Context) error
	// ファイルの取得
	// (GET /files/{fileID})
	GetFile(ctx echo.Context, fileID FileIDInPath) error
	// リソースの作成
	// (POST /files/{fileID}/resources)
	PostResource(ctx echo.Context, fileID FileIDInPath) error
	// グループの一覧の取得
	// (GET /groups)
	GetGroups(ctx echo.Context, params GetGroupsParams) error
	// グループの作成
	// (POST /groups)
	PostGroup(ctx echo.Context) error
	// グループの削除
	// (DELETE /groups/{groupID})
	DeleteGroup(ctx echo.Context, groupID GroupIDInPath) error
	// グループの情報の取得
	// (GET /groups/{groupID})
	GetGroup(ctx echo.Context, groupID GroupIDInPath) error
	// グループの情報の編集
	// (PATCH /groups/{groupID})
	PatchGroup(ctx echo.Context, groupID GroupIDInPath) error
	// グループの作成
	// (POST /groups/{groupID}/resources/{resourceID})
	PostResourceToGroup(ctx echo.Context, groupID GroupIDInPath, resourceID ResourceIDInPath) error
	// OAuthのコールバック
	// (GET /oauth2/callback)
	Callback(ctx echo.Context, params CallbackParams) error
	// OAuthのcode_challengeとかの取得
	// (GET /oauth2/generate/code)
	GetGeneratedCode(ctx echo.Context) error
	// ログアウト
	// (POST /oauth2/logout)
	PostLogout(ctx echo.Context) error
	// リソースの情報の取得
	// (GET /resources)
	GetResources(ctx echo.Context, params GetResourcesParams) error
	// リソースの情報の取得
	// (GET /resources/{resourceID})
	GetResource(ctx echo.Context, resourceID ResourceIDInPath) error
	// traQの全ユーザー取得
	// (GET /users)
	GetUsers(ctx echo.Context) error
	// 自分の情報の取得
	// (GET /users/me)
	GetMe(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostFile converts echo context to params.
func (w *ServerInterfaceWrapper) PostFile(ctx echo.Context) error {
	var err error

	ctx.Set(TraPMemberAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostFile(ctx)
	return err
}

// GetFile converts echo context to params.
func (w *ServerInterfaceWrapper) GetFile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "fileID" -------------
	var fileID FileIDInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "fileID", runtime.ParamLocationPath, ctx.Param("fileID"), &fileID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fileID: %s", err))
	}

	ctx.Set(TraPMemberAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetFile(ctx, fileID)
	return err
}

// PostResource converts echo context to params.
func (w *ServerInterfaceWrapper) PostResource(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "fileID" -------------
	var fileID FileIDInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "fileID", runtime.ParamLocationPath, ctx.Param("fileID"), &fileID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fileID: %s", err))
	}

	ctx.Set(TraPMemberAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostResource(ctx, fileID)
	return err
}

// GetGroups converts echo context to params.
func (w *ServerInterfaceWrapper) GetGroups(ctx echo.Context) error {
	var err error

	ctx.Set(TraPMemberAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetGroupsParams
	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", ctx.QueryParams(), &params.Type)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter type: %s", err))
	}

	// ------------- Optional query parameter "user" -------------

	err = runtime.BindQueryParameter("form", true, false, "user", ctx.QueryParams(), &params.User)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetGroups(ctx, params)
	return err
}

// PostGroup converts echo context to params.
func (w *ServerInterfaceWrapper) PostGroup(ctx echo.Context) error {
	var err error

	ctx.Set(TraPMemberAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostGroup(ctx)
	return err
}

// DeleteGroup converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "groupID" -------------
	var groupID GroupIDInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "groupID", runtime.ParamLocationPath, ctx.Param("groupID"), &groupID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter groupID: %s", err))
	}

	ctx.Set(TraPMemberAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteGroup(ctx, groupID)
	return err
}

// GetGroup converts echo context to params.
func (w *ServerInterfaceWrapper) GetGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "groupID" -------------
	var groupID GroupIDInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "groupID", runtime.ParamLocationPath, ctx.Param("groupID"), &groupID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter groupID: %s", err))
	}

	ctx.Set(TraPMemberAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetGroup(ctx, groupID)
	return err
}

// PatchGroup converts echo context to params.
func (w *ServerInterfaceWrapper) PatchGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "groupID" -------------
	var groupID GroupIDInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "groupID", runtime.ParamLocationPath, ctx.Param("groupID"), &groupID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter groupID: %s", err))
	}

	ctx.Set(TraPMemberAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchGroup(ctx, groupID)
	return err
}

// PostResourceToGroup converts echo context to params.
func (w *ServerInterfaceWrapper) PostResourceToGroup(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "groupID" -------------
	var groupID GroupIDInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "groupID", runtime.ParamLocationPath, ctx.Param("groupID"), &groupID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter groupID: %s", err))
	}

	// ------------- Path parameter "resourceID" -------------
	var resourceID ResourceIDInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "resourceID", runtime.ParamLocationPath, ctx.Param("resourceID"), &resourceID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceID: %s", err))
	}

	ctx.Set(TraPMemberAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostResourceToGroup(ctx, groupID, resourceID)
	return err
}

// Callback converts echo context to params.
func (w *ServerInterfaceWrapper) Callback(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CallbackParams
	// ------------- Required query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, true, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Callback(ctx, params)
	return err
}

// GetGeneratedCode converts echo context to params.
func (w *ServerInterfaceWrapper) GetGeneratedCode(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetGeneratedCode(ctx)
	return err
}

// PostLogout converts echo context to params.
func (w *ServerInterfaceWrapper) PostLogout(ctx echo.Context) error {
	var err error

	ctx.Set(TraPMemberAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostLogout(ctx)
	return err
}

// GetResources converts echo context to params.
func (w *ServerInterfaceWrapper) GetResources(ctx echo.Context) error {
	var err error

	ctx.Set(TraPMemberAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetResourcesParams
	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", ctx.QueryParams(), &params.Type)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter type: %s", err))
	}

	// ------------- Optional query parameter "user" -------------

	err = runtime.BindQueryParameter("form", true, false, "user", ctx.QueryParams(), &params.User)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter user: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetResources(ctx, params)
	return err
}

// GetResource converts echo context to params.
func (w *ServerInterfaceWrapper) GetResource(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "resourceID" -------------
	var resourceID ResourceIDInPath

	err = runtime.BindStyledParameterWithLocation("simple", false, "resourceID", runtime.ParamLocationPath, ctx.Param("resourceID"), &resourceID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resourceID: %s", err))
	}

	ctx.Set(TraPMemberAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetResource(ctx, resourceID)
	return err
}

// GetUsers converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsers(ctx echo.Context) error {
	var err error

	ctx.Set(TraPMemberAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsers(ctx)
	return err
}

// GetMe converts echo context to params.
func (w *ServerInterfaceWrapper) GetMe(ctx echo.Context) error {
	var err error

	ctx.Set(TraPMemberAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMe(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/files", wrapper.PostFile)
	router.GET(baseURL+"/files/:fileID", wrapper.GetFile)
	router.POST(baseURL+"/files/:fileID/resources", wrapper.PostResource)
	router.GET(baseURL+"/groups", wrapper.GetGroups)
	router.POST(baseURL+"/groups", wrapper.PostGroup)
	router.DELETE(baseURL+"/groups/:groupID", wrapper.DeleteGroup)
	router.GET(baseURL+"/groups/:groupID", wrapper.GetGroup)
	router.PATCH(baseURL+"/groups/:groupID", wrapper.PatchGroup)
	router.POST(baseURL+"/groups/:groupID/resources/:resourceID", wrapper.PostResourceToGroup)
	router.GET(baseURL+"/oauth2/callback", wrapper.Callback)
	router.GET(baseURL+"/oauth2/generate/code", wrapper.GetGeneratedCode)
	router.POST(baseURL+"/oauth2/logout", wrapper.PostLogout)
	router.GET(baseURL+"/resources", wrapper.GetResources)
	router.GET(baseURL+"/resources/:resourceID", wrapper.GetResource)
	router.GET(baseURL+"/users", wrapper.GetUsers)
	router.GET(baseURL+"/users/me", wrapper.GetMe)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
