// Package Openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package Openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	TraPMemberAuthScopes = "traPMemberAuth.Scopes"
)

// ユーザー
type User struct {
	// traQのID（UUID）
	Id string `json:"id"`

	// traQID（UUIDでない方）
	Name string `json:"name"`
}

// CallbackParams defines parameters for Callback.
type CallbackParams struct {
	// OAuth2.0のcode
	Code string `json:"code"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// OAuthのコールバック
	// (GET /oauth2/callback)
	Callback(ctx echo.Context, params CallbackParams) error
	// OAuthのcode_challengeとかの取得
	// (GET /oauth2/generate/code)
	GetGeneratedCode(ctx echo.Context) error
	// ログアウト
	// (POST /oauth2/logout)
	PostLogout(ctx echo.Context) error
	// traQの全ユーザー取得
	// (GET /users)
	GetUsers(ctx echo.Context) error
	// 自分の情報の取得
	// (GET /users/me)
	GetMe(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Callback converts echo context to params.
func (w *ServerInterfaceWrapper) Callback(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CallbackParams
	// ------------- Required query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, true, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Callback(ctx, params)
	return err
}

// GetGeneratedCode converts echo context to params.
func (w *ServerInterfaceWrapper) GetGeneratedCode(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetGeneratedCode(ctx)
	return err
}

// PostLogout converts echo context to params.
func (w *ServerInterfaceWrapper) PostLogout(ctx echo.Context) error {
	var err error

	ctx.Set(TraPMemberAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostLogout(ctx)
	return err
}

// GetUsers converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsers(ctx echo.Context) error {
	var err error

	ctx.Set(TraPMemberAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsers(ctx)
	return err
}

// GetMe converts echo context to params.
func (w *ServerInterfaceWrapper) GetMe(ctx echo.Context) error {
	var err error

	ctx.Set(TraPMemberAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMe(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/oauth2/callback", wrapper.Callback)
	router.GET(baseURL+"/oauth2/generate/code", wrapper.GetGeneratedCode)
	router.POST(baseURL+"/oauth2/logout", wrapper.PostLogout)
	router.GET(baseURL+"/users", wrapper.GetUsers)
	router.GET(baseURL+"/users/me", wrapper.GetMe)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RWQY/bRBT+K6uBYxI7ya4IrnqoFqmsoOpW1Z6qCE3sl3ha2+POjFeElaWO3UKgVO0B",
	"tUICFZVqu2xFCqoEgq74M0O22xN/Ac3EicMm2wjoZU+2PPO+efN933vPO8ilYUwjiARHzg7irg8hNq9b",
	"HJh+esBdRmJBaIQcpPJdlR+o7BeVH6AKihmNgQkCJoR48wGC4UtKDjfe++tgsLWlH5+jCoKPcRgHgBwU",
	"4k8Y4AhVkOjH+gMXjEQ9lFZQhENYDDhFU/KJkvtK3jy8/9txZOis4kbrHa9aX/Pera52641qq9vtVjue",
	"3Wp16o0Obtnzx6YVxOB6Qhh4yLmir1Qk0p5upZ2r4AqzlYObMCL6lzVvYxIEw5sXIOwAO5cI39Ci03Yp",
	"vUZgAuYgDpwTGvEyAxyTD6CPUo1Loi7VoS6NBHaFfi3iSr4SFiAH+ULE3LGsHhF+0qm5NLSKLdalBEcC",
	"kwiYZvOfLJZrSg7PbW7oNIgwvJVLK+OFbWB8HFWv2TVbg9EYIhwT5KBmza41tBOw8M39LYoT4TcsFwdB",
	"B7vX9LceiHkhL2p+lByq7Lm2VP5U5fdUnqvsGTIHMKw3bnjIQesTLC0Oj2nEx1w3bHse93Bwb/TFQ53l",
	"6qJll3qg5JdH+4+V/F7JXSVvquy2kntK3tFBa4uC/vx9cPjNQyUfjN2msj2V/6BLwJggCUPM+suuJHCP",
	"a0uN+UHtVJPGcAgCmF5YyE+jZis51DmjythI1xNg/dJHxVLpWcESqBSFbPx4zN/63IlGPYg0zWAZlGVC",
	"6U0fuT4OAoh6YBi7reRwdPf+6I8Hc5qdB3G+gPfWJ0nOaNe0mydpp25kRds42r8zuvvs5VcvXn37SMmn",
	"r+SvL5+8UPJrrdiNDFWQD9gz9O2gyyCq6+Mqm3Yy/VZ2hEnNncUd14N6o7m6dmZlEwv/rHVm5X0h4otR",
	"0F/QEtI3ZItlBM45ZEaqgPZoYsSJKReLGvOPKvtJZY9UtqvywZwcm5SLD8cY/7aI6ief9ljlz831TRkZ",
	"Ev5jDRWN1NTB8RZ6pZ22Z/mcv+tC5hJeOGOhqwuHjW7tzc60k828ZdAWc6fbNETmEBzHAXFNpHWV65Nm",
	"vUgEhCbwbQZd5KC3rHL+WsXwtczkTcu5wBguxsIp0mgJvRPBtEazclnhyX3o6LP90eBTJYeH+a3Rdz+/",
	"tvVcgP8r1XKFTpkir6HvuBoGmm1P5lL5p+FYVkBdHPiUC6dp27aFY2Jt15E+qkCZ/qoUxZhWpl8MftpO",
	"/w4AAP//2V5jX3cKAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
