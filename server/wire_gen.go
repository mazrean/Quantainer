// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/google/wire"
	"github.com/mazrean/Quantainer/auth"
	"github.com/mazrean/Quantainer/auth/traQ"
	"github.com/mazrean/Quantainer/bot/traq"
	"github.com/mazrean/Quantainer/cache"
	"github.com/mazrean/Quantainer/cache/ristretto"
	"github.com/mazrean/Quantainer/handler/v1"
	"github.com/mazrean/Quantainer/pkg/common"
	"github.com/mazrean/Quantainer/repository"
	"github.com/mazrean/Quantainer/repository/gorm2"
	"github.com/mazrean/Quantainer/service"
	v1_2 "github.com/mazrean/Quantainer/service/v1"
	"github.com/mazrean/Quantainer/storage"
	"github.com/mazrean/Quantainer/storage/local"
	"github.com/mazrean/Quantainer/storage/swift"
	"net/http"
)

// Injectors from wire.go:

func injectSwiftStorage(config *Config) (*Storage, error) {
	swiftAuthURL := config.SwiftAuthURL
	swiftUserName := config.SwiftUserName
	swiftPassword := config.SwiftPassword
	swiftTenantName := config.SwiftTenantName
	swiftTenantID := config.SwiftTenantID
	swiftContainer := config.SwiftContainer
	filePath := config.FilePath
	client, err := swift.NewClient(swiftAuthURL, swiftUserName, swiftPassword, swiftTenantName, swiftTenantID, swiftContainer, filePath)
	if err != nil {
		return nil, err
	}
	file := swift.NewFile(client)
	storage := newStorage(file)
	return storage, nil
}

func injectLocalStorage(config *Config) (*Storage, error) {
	filePath := config.FilePath
	directoryManager := local.NewDirectoryManager(filePath)
	file, err := local.NewFile(directoryManager)
	if err != nil {
		return nil, err
	}
	storage := newStorage(file)
	return storage, nil
}

func InjectService(config *Config) (*Service, error) {
	sessionKey := config.SessionKey
	sessionSecret := config.SessionSecret
	session := v1.NewSession(sessionKey, sessionSecret)
	client := config.HttpClient
	traQBaseURL := config.TraQBaseURL
	oidc := traq.NewOIDC(client, traQBaseURL)
	clientID := config.OAuthClientID
	v1OIDC := v1_2.NewOIDC(oidc, clientID)
	checker := v1.NewChecker(session, v1OIDC)
	user := traq.NewUser(client, traQBaseURL)
	ristrettoUser, err := ristretto.NewUser()
	if err != nil {
		return nil, err
	}
	userUtils := v1_2.NewUserUtils(user, ristrettoUser)
	v1User := v1_2.NewUser(userUtils)
	user2 := v1.NewUser(session, checker, v1User)
	oAuth2 := v1.NewOAuth2(traQBaseURL, session, checker, v1OIDC)
	isProduction := config.IsProduction
	db, err := gorm2.NewDB(isProduction)
	if err != nil {
		return nil, err
	}
	file, err := gorm2.NewFile(db)
	if err != nil {
		return nil, err
	}
	storage, err := injectedStorage(config)
	if err != nil {
		return nil, err
	}
	storageFile := storage.File
	v1File := v1_2.NewFile(db, file, storageFile, userUtils)
	file2 := v1.NewFile(session, checker, v1File)
	resource, err := gorm2.NewResource(db)
	if err != nil {
		return nil, err
	}
	group, err := gorm2.NewGroup(db)
	if err != nil {
		return nil, err
	}
	v1Resource := v1_2.NewResource(db, file, resource, group, userUtils)
	resource2 := v1.NewResource(session, checker, v1Resource)
	administrator := gorm2.NewAdministrator(db)
	v1Group := v1_2.NewGroup(db, resource, group, administrator, userUtils)
	group2 := v1.NewGroup(session, checker, v1Group)
	api := v1.NewAPI(user2, oAuth2, session, file2, resource2, group2)
	accessToken := config.AccessToken
	verificationToken := config.VerificationToken
	defaultChannels := config.DefaultChannels
	updatedAt := config.UpdatedAt
	botBot, err := bot.NewBot(accessToken, verificationToken, defaultChannels, updatedAt, v1File, v1Resource)
	if err != nil {
		return nil, err
	}
	service := NewService(api, botBot)
	return service, nil
}

// wire.go:

type Config struct {
	IsProduction      common.IsProduction
	SessionKey        common.SessionKey
	SessionSecret     common.SessionSecret
	TraQBaseURL       common.TraQBaseURL
	OAuthClientID     common.ClientID
	SwiftAuthURL      common.SwiftAuthURL
	SwiftUserName     common.SwiftUserName
	SwiftPassword     common.SwiftPassword
	SwiftTenantID     common.SwiftTenantID
	SwiftTenantName   common.SwiftTenantName
	SwiftContainer    common.SwiftContainer
	FilePath          common.FilePath
	AccessToken       common.AccessToken
	VerificationToken common.VerificationToken
	DefaultChannels   common.DefaultChannels
	UpdatedAt         common.UpdatedAt
	HttpClient        *http.Client
}

type Storage struct {
	File storage.File
}

func newStorage(file storage.File) *Storage {
	return &Storage{
		File: file,
	}
}

var (
	isProductionField      = wire.FieldsOf(new(*Config), "IsProduction")
	sessionKeyField        = wire.FieldsOf(new(*Config), "SessionKey")
	sessionSecretField     = wire.FieldsOf(new(*Config), "SessionSecret")
	traQBaseURLField       = wire.FieldsOf(new(*Config), "TraQBaseURL")
	oAuthClientIDField     = wire.FieldsOf(new(*Config), "OAuthClientID")
	swiftAuthURLField      = wire.FieldsOf(new(*Config), "SwiftAuthURL")
	swiftUserNameField     = wire.FieldsOf(new(*Config), "SwiftUserName")
	swiftPasswordField     = wire.FieldsOf(new(*Config), "SwiftPassword")
	swiftTenantIDField     = wire.FieldsOf(new(*Config), "SwiftTenantID")
	swiftTenantNameField   = wire.FieldsOf(new(*Config), "SwiftTenantName")
	swiftContainerField    = wire.FieldsOf(new(*Config), "SwiftContainer")
	filePathField          = wire.FieldsOf(new(*Config), "FilePath")
	accessTokenField       = wire.FieldsOf(new(*Config), "AccessToken")
	verificationTokenField = wire.FieldsOf(new(*Config), "VerificationToken")
	defaultChannelsField   = wire.FieldsOf(new(*Config), "DefaultChannels")
	updatedAtField         = wire.FieldsOf(new(*Config), "UpdatedAt")
	httpClientField        = wire.FieldsOf(new(*Config), "HttpClient")
)

func injectedStorage(config *Config) (*Storage, error) {
	if config.IsProduction {
		return injectSwiftStorage(config)
	}

	return injectLocalStorage(config)
}

var (
	dbBind                      = wire.Bind(new(repository.DB), new(*gorm2.DB))
	fileRepositoryBind          = wire.Bind(new(repository.File), new(*gorm2.File))
	resourceRepositoryBind      = wire.Bind(new(repository.Resource), new(*gorm2.Resource))
	groupRepositoryBind         = wire.Bind(new(repository.Group), new(*gorm2.Group))
	administratorRepositoryBind = wire.Bind(new(repository.Administrator), new(*gorm2.Administrator))

	oidcAuthBind = wire.Bind(new(auth.OIDC), new(*traq.OIDC))
	userAuthBind = wire.Bind(new(auth.User), new(*traq.User))

	userCacheBind = wire.Bind(new(cache.User), new(*ristretto.User))

	oidcServiceBind     = wire.Bind(new(service.OIDC), new(*v1_2.OIDC))
	userServiceBind     = wire.Bind(new(service.User), new(*v1_2.User))
	fileServiceBind     = wire.Bind(new(service.File), new(*v1_2.File))
	resourceServiceBind = wire.Bind(new(service.Resource), new(*v1_2.Resource))
	groupServiceBind    = wire.Bind(new(service.Group), new(*v1_2.Group))

	fileField = wire.FieldsOf(new(*Storage), "File")
)

type Service struct {
	*v1.API
	*bot.Bot
}

func NewService(api *v1.API, b *bot.Bot) *Service {
	return &Service{
		API: api,
		Bot: b,
	}
}
