// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/google/wire"
	"github.com/mazrean/Quantainer/auth"
	"github.com/mazrean/Quantainer/auth/traQ"
	"github.com/mazrean/Quantainer/cache"
	"github.com/mazrean/Quantainer/cache/ristretto"
	"github.com/mazrean/Quantainer/handler/v1"
	"github.com/mazrean/Quantainer/pkg/common"
	"github.com/mazrean/Quantainer/repository"
	"github.com/mazrean/Quantainer/repository/gorm2"
	"github.com/mazrean/Quantainer/service"
	v1_2 "github.com/mazrean/Quantainer/service/v1"
	"net/http"
)

// Injectors from wire.go:

func InjectAPI(config *Config) (*v1.API, error) {
	sessionKey := config.SessionKey
	sessionSecret := config.SessionSecret
	session := v1.NewSession(sessionKey, sessionSecret)
	client := config.HttpClient
	traQBaseURL := config.TraQBaseURL
	oidc := traq.NewOIDC(client, traQBaseURL)
	clientID := config.OAuthClientID
	v1OIDC := v1_2.NewOIDC(oidc, clientID)
	checker := v1.NewChecker(session, v1OIDC)
	user := traq.NewUser(client, traQBaseURL)
	ristrettoUser, err := ristretto.NewUser()
	if err != nil {
		return nil, err
	}
	userUtils := v1_2.NewUserUtils(user, ristrettoUser)
	v1User := v1_2.NewUser(userUtils)
	user2 := v1.NewUser(session, checker, v1User)
	oAuth2 := v1.NewOAuth2(traQBaseURL, session, checker, v1OIDC)
	api := v1.NewAPI(user2, oAuth2, session)
	return api, nil
}

// wire.go:

type Config struct {
	IsProduction    common.IsProduction
	SessionKey      common.SessionKey
	SessionSecret   common.SessionSecret
	TraQBaseURL     common.TraQBaseURL
	OAuthClientID   common.ClientID
	SwiftAuthURL    common.SwiftAuthURL
	SwiftUserName   common.SwiftUserName
	SwiftPassword   common.SwiftPassword
	SwiftTenantID   common.SwiftTenantID
	SwiftTenantName common.SwiftTenantName
	SwiftContainer  common.SwiftContainer
	FilePath        common.FilePath
	HttpClient      *http.Client
}

type Storage struct {
}

func newStorage() *Storage {
	return &Storage{}
}

var (
	isProductionField    = wire.FieldsOf(new(*Config), "IsProduction")
	sessionKeyField      = wire.FieldsOf(new(*Config), "SessionKey")
	sessionSecretField   = wire.FieldsOf(new(*Config), "SessionSecret")
	traQBaseURLField     = wire.FieldsOf(new(*Config), "TraQBaseURL")
	oAuthClientIDField   = wire.FieldsOf(new(*Config), "OAuthClientID")
	swiftAuthURLField    = wire.FieldsOf(new(*Config), "SwiftAuthURL")
	swiftUserNameField   = wire.FieldsOf(new(*Config), "SwiftUserName")
	swiftPasswordField   = wire.FieldsOf(new(*Config), "SwiftPassword")
	swiftTenantIDField   = wire.FieldsOf(new(*Config), "SwiftTenantID")
	swiftTenantNameField = wire.FieldsOf(new(*Config), "SwiftTenantName")
	swiftContainerField  = wire.FieldsOf(new(*Config), "SwiftContainer")
	filePathField        = wire.FieldsOf(new(*Config), "FilePath")
	httpClientField      = wire.FieldsOf(new(*Config), "HttpClient")
)

var (
	dbBind = wire.Bind(new(repository.DB), new(*gorm2.DB))

	oidcAuthBind = wire.Bind(new(auth.OIDC), new(*traq.OIDC))
	userAuthBind = wire.Bind(new(auth.User), new(*traq.User))

	userCacheBind = wire.Bind(new(cache.User), new(*ristretto.User))

	oidcServiceBind = wire.Bind(new(service.OIDC), new(*v1_2.OIDC))
	userServiceBind = wire.Bind(new(service.User), new(*v1_2.User))
)
